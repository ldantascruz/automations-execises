# -*- coding: utf-8 -*-
"""
Gerador de Li√ß√µes de Ingl√™s com IA (Gemini)
Autor: Assistant
Descri√ß√£o: Gera PDFs com li√ß√µes de ingl√™s personalizadas sobre qualquer t√≥pico.
"""

import logging
logging.getLogger('absl').setLevel(logging.ERROR)
import os
import google.generativeai as genai
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.lib.colors import navy, black
from dotenv import load_dotenv

def configurar_api_gemini():
    load_dotenv()
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        print("Erro: A chave da API do Gemini n√£o foi encontrada.")
        print("Por favor, crie um arquivo '.env' e adicione a linha: GEMINI_API_KEY='SUA_CHAVE_API_AQUI'")
        return None
    genai.configure(api_key=api_key)
    listar_modelos_disponiveis()
    try:
        return genai.GenerativeModel('gemini-2.5-pro')
    except Exception as e:
        print(f"Erro ao carregar gemini-2.5-pro: {e}")
        print("Tentando modelo alternativo: gemini-2.5-flash")
        return genai.GenerativeModel('gemini-2.5-flash')

def listar_modelos_disponiveis():
    """
    Lista os modelos dispon√≠veis na API do Gemini.
    """
    try:
        models = genai.list_models()
        print("Modelos dispon√≠veis:")
        for model in models:
            print(f"- {model.name} (Supported methods: {', '.join(model.supported_generation_methods)})")
    except Exception as e:
        print(f"Erro ao listar modelos: {e}")

def gerar_conteudo_licao(model, topic):
    """
    Usa o modelo Gemini para gerar o conte√∫do da li√ß√£o com base em um t√≥pico.
    """
    print(f"ü§ñ Gerando conte√∫do para a li√ß√£o sobre '{topic}' com a IA... Aguarde.")
    
    prompt = f"""
    Voc√™ √© um professor de ingl√™s did√°tico e seu aluno √© um falante de portugu√™s brasileiro.
    Crie uma li√ß√£o completa sobre o t√≥pico: '{topic}'.
    A li√ß√£o deve ser estruturada exatamente no seguinte formato, usando os t√≠tulos em portugu√™s:

    ### Explica√ß√£o Simples:
    (Uma explica√ß√£o clara e concisa do t√≥pico em portugu√™s, com no m√°ximo 2 par√°grafos.)

    ### Exemplos de Aplica√ß√£o:
    (Pelo menos 3 frases de exemplo em ingl√™s com a tradu√ß√£o em portugu√™s ao lado.)

    ### Como Usar (Frases Simples):
    (Mostre a estrutura de frases afirmativas, negativas e interrogativas, se aplic√°vel, com exemplos.)

    ### Como Fica a Fala (Pron√∫ncia):
    (D√™ dicas de pron√∫ncia e mencione contra√ß√µes comuns, explicando como se fala de forma simples, como "fala-se: u√≥rks".)

    ### Exerc√≠cios:
    (Crie 5 exerc√≠cios de completar a frase para praticar o t√≥pico. Use ___ para o espa√ßo a ser preenchido.)

    ### Gabarito:
    (Apresente as respostas corretas para os 5 exerc√≠cios.)

    Certifique-se de que o conte√∫do seja adequado para um aluno de n√≠vel b√°sico a intermedi√°rio.
    N√£o adicione formata√ß√£o adicional, como tabelas ou cabe√ßalhos al√©m dos solicitados com '###'. Use texto simples e claro para facilitar a gera√ß√£o de PDF.
    """
    
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        print(f"Ocorreu um erro ao chamar a API do Gemini: {e}")
        return None

def criar_pdf_licao(topic, content):
    """
    Cria um arquivo PDF formatado com o conte√∫do da li√ß√£o gerado pela IA.
    """
    # Sanitiza o nome do arquivo
    file_name = f"licao_ingles_{topic.replace(' ', '_').lower()}.pdf"
    print(f"üìÑ Formatando e criando o arquivo PDF: {file_name}")

    doc = SimpleDocTemplate(file_name, pagesize=A4, rightMargin=2*cm, leftMargin=2*cm, topMargin=2*cm, bottomMargin=2*cm)
    styles = getSampleStyleSheet()
    
    # Estilos personalizados
    styles.add(ParagraphStyle(name='TitleStyle', fontName='Helvetica-Bold', fontSize=18, textColor=navy, spaceAfter=12))
    styles.add(ParagraphStyle(name='HeadingStyle', fontName='Helvetica-Bold', fontSize=14, textColor=black, spaceBefore=12, spaceAfter=6))
    styles.add(ParagraphStyle(name='BodyStyle', fontName='Helvetica', fontSize=11, leading=14, alignment=4)) # Justificado

    story = []
    
    # Adiciona o T√≠tulo da Li√ß√£o
    story.append(Paragraph(f"Li√ß√£o de Ingl√™s: {topic.title()}", styles['TitleStyle']))
    story.append(Spacer(1, 0.5*cm))

    # Processa o conte√∫do gerado pela IA
    lines = content.split('\n')
    for line in lines:
        if line.startswith('### '):
            # √â um t√≠tulo de se√ß√£o
            heading_text = line.replace('### ', '').strip()
            story.append(Paragraph(heading_text, styles['HeadingStyle']))
        elif line.strip():
            # √â um par√°grafo de conte√∫do
            # Substitui `*` por `‚Ä¢` para listas
            line = line.replace('*', '‚Ä¢')
            story.append(Paragraph(line, styles['BodyStyle']))
            
    # Gera o PDF
    try:
        doc.build(story)
        print(f"‚úÖ PDF gerado com sucesso: {file_name}")
    except Exception as e:
        print(f"Ocorreu um erro ao gerar o PDF: {e}")


def main():
    """
    Fun√ß√£o principal que orquestra a intera√ß√£o com o usu√°rio.
    """
    print("=" * 60)
    print("      GERADOR DE LI√á√ïES DE INGL√äS COM INTELIG√äNCIA ARTIFICIAL")
    print("=" * 60)
    
    model = configurar_api_gemini()
    if not model:
        return # Encerra se a API n√£o p√¥de ser configurada

    while True:
        topic = input("\n> Qual t√≥pico de ingl√™s voc√™ gostaria de aprender hoje?\n  (Ex: Verbo To Be, Simple Present, Prepositions of time)\n> Digite o t√≥pico: ")
        
        if not topic.strip():
            print("Por favor, digite um t√≥pico v√°lido.")
            continue
            
        content = gerar_conteudo_licao(model, topic)
        
        if content:
            criar_pdf_licao(topic, content)
            
        continuar = input("\nDeseja gerar outra li√ß√£o? (s/n): ").lower()
        if continuar != 's':
            print("At√© a pr√≥xima e bons estudos!")
            break

if __name__ == "__main__":
    main()
